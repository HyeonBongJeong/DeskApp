<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="PaymentMapper"> <!-- DAO에서 접근할때 사용되는 이름임 -->


	<resultMap type="Conference" id="resultConference">
		<id property="conference_id" column="conference_id"></id>
		<result property="conference_member" column="conference_member" />
		<result property="conference_title" column="conference_title" />
		<result property="conference_contents"
			column="conference_contents" />
		<result property="conference_date" column="conference_date" />
		<result property="id" column="id" />
	</resultMap>

	<resultMap type="Annual" id="resultAnnual">
		<id property="id" column="id" />
		<result property="annual_id" column="annual_id" />
		<result property="annual_content" column="annual_content" />
		<result property="annual_kind" column="annual_kind" />
		<result property="annual_stddate" column="annual_stddate" />
		<result property="annual_enddate" column="annual_enddate" />
	</resultMap>

	<resultMap type="Member" id="resultMember"> <!-- type = "xml의 별칭" -->
		<!-- property에는vo의 필드명, column에는 db table의 컬럼명 -->
		<id property="id" column="id"></id>
		<result property="password" column="password" />
		<result property="name" column="name" />
		<result property="phone" column="phone" />
		<result property="email" column="email" />
		<result property="position" column="position" />
		<result property="profile" column="profile" />
		<result property="status" column="status" />
		<result property="annual" column="annual" />
		<result property="signiture" column="signiture" />
		<result property="employ_date" column="employ_date" />
		<result property="dept_no" column="dept_no" />
		<result property="birth" column="birth" />
		<result property="manage" column="manage" />
		<result property="dept_name" column="dept_name" />
	</resultMap>

	<resultMap type="Payment_confirm" id="resultpayment_confirm">
		<id property="payment_confirm_id" column="payment_confirm_id" />
		<result property="payment_id" column="annual_id" />
		<result property="s_member_id0" column="s_member_id0" />
		<result property="s_member_id1" column="s_member_id1" />
		<result property="s_member_id2" column="s_member_id2" />
	</resultMap>

	<resultMap type="Payment" id="resultPayment">
		<id property="payment_id" column="payment_id"></id>
		<result property="payment_item" column="payment_item" />
		<result property="payment_status" column="payment_status" />
		<result property="payment_members_count"
			column="payment_members_count" />
		<result property="payment_prestatus" column="payment_prestatus" />
		<result property="id" column="id" />
		<result property="conference_id" column="conference_id" />
		<result property="annual_id" column="annual_id" />
		<result property="annual_content" column="annual_content" />
		<result property="annual_kind" column="annual_kind" />
		<result property="annual_stddate" column="annual_stddate" />
		<result property="annual_enddate" column="annual_enddate" />
		<result property="write_date" column="write_date" />
		<result property="s_member_id0" column="s_member_id0" />
		<result property="s_member_id1" column="s_member_id1" />
		<result property="s_member_id2" column="s_member_id2" />
		<collection property="Conference"
			resultMap="resultConference"></collection>
		<collection property="Member" resultMap="resultMember"></collection>
		<collection property="Payment_confirm"
			resultMap="resultpayment_confirm"></collection>

	</resultMap>

	<select id="paymentList" resultType="arraylist"
		parameterType="string" resultMap="resultPayment">
		select c.conference_title, p.id,
		p.payment_item, p.payment_status,c.conference_date, p.conference_id,
		p.annual_id, p.payment_id, p.write_date,m.name
		from payment p
		left outer
		join conference c
		on
		c.conference_id = p.conference_id
		left outer join
		annual a
		on
		a.annual_id = p.annual_id
		left outer join member m
		on
		m.id =
		p.id
		where exists (select 1
		from member
		where member.id = p.id
		and
		member.id =
		#{id}
		)

	</select>

	<select id="receive-paymentList" resultType="arraylist"
		parameterType="string" resultMap="resultPayment">
		select c.conference_title, p.id,
		p.payment_item,
		p.payment_status,c.conference_date, p.conference_id,
		p.annual_id,
		p.payment_id, p.write_date,m.name
		from payment p
		left outer join
		conference c
		on
		c.conference_id = p.conference_id
		left outer join annual
		a
		on
		a.annual_id = p.annual_id
		left outer join member m
		on
		m.id = p.id
		where p.payment_id in (select pc.payment_id
		from payment_confirm pc
		where pc.S_MEMBER_ID0 = #{id}
		or pc.S_MEMBER_ID1 =#{id} or pc.S_MEMBER_ID2 =#{id}
		)
	</select>
	<insert id="paymentInsert" parameterType="Payment"
		flushCache="true" statementType="PREPARED">
		<selectKey resultType="string" keyProperty="id"
			order="BEFORE">
			select id from member where id = #{id}
		</selectKey>
		insert into payment (payment_id, payment_members_count, id,
		conference_id, annual_id)
		values (#{payment_id},
		
		#{payment_members_count},
		<!-- #{payment_prestatus}, -->
		#{id},
		#{conference_id},
		#{annual_id})
	</insert>

	<select id="paymentDetail" parameterType="string"
		resultMap="resultPayment" resultType="Payment">
		select * from payment p
		left outer
		join conference c
		on c.conference_id = p.conference_id
		left outer join
		annual a
		on a.annual_id = p.annual_id
		left outer join payment_confirm pc
		on pc.payment_id = p.payment_id
		where p.payment_id = #{payment_id}
	</select>

	<select id="seqPayment" resultType="string">
		select SEQ_PAYMENT.nextval from dual
	</select>

</mapper>
