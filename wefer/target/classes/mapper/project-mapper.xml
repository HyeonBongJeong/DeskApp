<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="Project">

<!-- //	PROJECT_ID       NOT NULL VARCHAR2(2000) 
//	PROJECT_TITLE    NOT NULL VARCHAR2(2000) 
//	PROJECT_STD_DATE NOT NULL DATE           
//	PROJECT_END_DATE NOT NULL DATE           
//	PROJECT_STATUS   NOT NULL VARCHAR2(2000)  -->
	<resultMap type="Project" id="resultProject">
		<id property="project_id" column="project_id"/>
		<result property="project_title" column="project_title"/>
		<result property="project_std_date" column="project_std_date"/>
		<result property="project_end_date" column="project_end_date"/>
		<result property="project_status" column="project_status"/>
		<result property="project_color" column="project_color"/>
		<result property="project_member_grade" column="project_member_grade"/>
		<result property="progress" column="progress"/>
		<collection property="projectMembers" resultMap="resultProjectMember" ofType="ProjectMember">
		</collection>
		
	</resultMap>
	
	<resultMap type="ProjectSub" id="resultProjectSub">
		<id property="project_sub_id" column="project_sub_id"/>
		<result property="project_sub_title" column="project_sub_title"/>
		<result property="project_sub_std_date" column="project_sub_std_date"/>
		<result property="project_sub_end_date" column="project_sub_end_date"/>
		<result property="project_sub_important" column="project_sub_important"/>
		<result property="project_sub_status" column="project_sub_status"/>
		<result property="project_color" column="project_color"/>
		<result property="project_id" column="project_id"/>
		<result property="project_member_grade" column="project_member_grade"/>
		<collection property="project" resultMap="resultProject" ofType="Project">
		</collection> 
		<collection property="projectMembers" resultMap="resultProjectMember" ofType="ProjectMember">
		</collection> 
		<collection property="members" resultMap="resultMember" ofType="Member">
		</collection> 
	</resultMap>
	
	
	
	
	<resultMap type="ProjectMember" id="resultProjectMember">
		<id property="project_member_id" column="project_member_id"/>
		<result property="project_id" column="project_id"/>
		<result property="project_sub_id" column="project_sub_id"/>
		<result property="id" column="id"/>
		<result property="project_member_grade" column="project_member_grade"/>
		
		<result property="project_title" column="project_title"/>
		<result property="project_std_date" column="project_std_date"/>
		<result property="project_end_date" column="project_end_date"/>
		<result property="project_status" column="project_status"/>
		<result property="project_color" column="project_color"/>
		
		<result property="project_sub_title" column="project_sub_title"/>
		<result property="project_sub_std_date" column="project_sub_std_date"/>
		<result property="project_sub_end_date" column="project_sub_end_date"/>
		<result property="project_sub_important" column="project_sub_important"/>
		<result property="project_sub_status" column="project_sub_status"/>


		<collection property="members" resultMap="resultMember" ofType="Member">
		</collection> 

		
	</resultMap>
<!-- 	
	private String project_datail_id;
	private String project_datail_content;
	private Date project_datail_write_date;
	private String project_datail_file;
	private String id;
	private String project_id;
	private String project_sub_id; -->
		<resultMap type="ProjectDetail" id="resultProjectDetail">
		<id property="project_datail_id" column="project_datail_id"/>
		<result property="project_datail_content" column="project_datail_content"/>
		<result property="project_datail_write_date" column="project_datail_write_date"/>
		<result property="project_datail_file" column="project_datail_file"/>
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="profile" column="profile"/>
		
		<result property="project_id" column="project_id"/>
		<result property="project_sub_id" column="project_sub_id"/>
		<result property="project_datail_status" column="project_datail_status"/>
	
	</resultMap>
	
	
<!-- 	private String project_comment_id;
		private String project_comment_content;
		private Date project_comment_writedate;
		private String project_datail_id;
		private String id; -->
	<resultMap type="ProjectComment" id="resultProjectComment">
		<id property="project_comment_id" column="project_comment_id"/>
		<result property="project_comment_content" column="project_comment_content"/>
		<result property="project_comment_writedate" column="project_comment_writedate"/>
		<result property="project_datail_id" column="project_datail_id"/>
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="project_recomment_id" column="project_recomment_id"/>
		<result property="project_recomment_content" column="project_recomment_content"/>
		<result property="project_recomment_date" column="project_recomment_date"/>
		<result property="profile" column="profile"/>
	</resultMap>
	
<!-- 	private String project_comment_id;
private String project_comment_content;
private Date project_comment_writedate;
private String project_datail_id;

private String id;
private String name;
private String profile;

private String project_recomment_id;
private String project_recomment_content;
private String project_recomment_date;

private List<ProjectReComment> projectRecomments;
private List<Member> members; -->
	<resultMap type="ProjectReComment" id="resultProjectReComment">
		<id property="project_recomment_id" column="project_recomment_id"/>
		<result property="project_recomment_content" column="project_recomment_content"/>
		<result property="project_recomment_date" column="project_recomment_date"/>
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="profile" column="profile"/>
	</resultMap>

	<resultMap type="Member" id="resultMember"> <!-- type = "xml의 별칭" -->
		<!-- property에는vo의 필드명, column에는 db table의 컬럼명 -->
		<id property="id" column="id"></id>
		<result property="password" column="password" />
		<result property="name" column="name" />
		<result property="phone" column="phone" />
		<result property="email" column="email" />
		<result property="position" column="position" />
		<result property="profile" column="profile" />
		<result property="status" column="status" />
		<result property="annual" column="annual" />
		<result property="signiture" column="signiture" />
		<result property="employ_date" column="employ_date" />
		<result property="dept_no" column="dept_no" />
		<result property="birth" column="birth" />
		<result property="manage" column="manage" />
		<result property="dept_name" column="dept_name" />
	</resultMap>

	
	
<!--private String project_sub_id;
	private String project_sub_title;
	private String project_sub_std_date;
	private String project_sub_end_date;
	private String project_sub_important;
	private String project_sub_status;
	private String project_id; -->
	
	<!-- 프로젝트 전체 조회 -->
	<select id="projectList" resultType="arraylist"
		resultMap="resultProject" parameterType="Project">
    	select distinct project.*, project_member.project_member_grade,  project_member.id
		from project, project_member 
		where project.project_id = project_member.project_id and project_member.id = #{id} and project.project_status = '진행중' or project.project_status = '진행예정'
	</select>
	
	<!-- 프로젝트 프로그레스 용 상태 조회 -->
	<select id="projectProgress" resultType="arraylist"
		resultMap="resultProjectSub" parameterType="ProjectSub">
    		select project_sub_status from project_sub where project_id = #{project_id}
    </select>
	
	<!-- 종료 프로젝트 전체 조회 -->
	<select id="projectEndList" resultType="arraylist"
		resultMap="resultProject" parameterType="Project">
    select distinct project.*, project_member.project_member_grade
		from project, project_member 
		where project.project_id = project_member.project_id and project_member.id = #{id} and project.project_status = '종료'
	</select>
	<!-- 프로젝트 삭제 -->
	<delete id="projectDelete" flushCache="true" statementType="PREPARED" timeout="20" parameterType="Project">
		delete from project where project_id = #{project_id}
	</delete>
	<!-- 프로젝트 삭제 -->
	<delete id="projectSubDelete" flushCache="true" statementType="PREPARED" timeout="20" parameterType="ProjectSub">
		delete from project_sub where project_sub_id = #{project_sub_id}
	</delete>
	
	<!-- 프로젝트 수정 -->
	<update id="updateProject" flushCache="true" statementType="PREPARED" timeout="20" parameterType="Project">
		update project 
		set project_title = #{project_title},
		project_std_date = #{project_std_date},
		project_end_date = #{project_end_date},
		project_status = #{project_status}
		where
		project_id = #{project_id}
	</update>
	<!-- 프로젝트 수정 -->
	<update id="updateTitleProject" flushCache="true" statementType="PREPARED" timeout="20" parameterType="Project">
		update project 
		set project_title = #{project_title}
		where
		project_id = #{project_id}
	</update>
	
	<!-- 프로젝트 작업 조회 -->
	<select id="projectSubList" resultType="arraylist"
		resultMap="resultProjectSub" parameterType="string">
		   select 
		   ps.*, 
		   pm.id, 
		   pm.project_member_grade, 
		   p.project_color,  
		   m.name 
		   from project_sub ps, PROJECT_MEMBER pm,  member m, project p 
		   where ps.project_sub_id = pm.project_sub_id 
		   and p.project_id  = pm.project_id 
		   and pm.id = m.id 
		   and ps.project_id = #{project_id}  
	</select>
	
	
	<!-- 프로젝트 작업 관리자 조회 -->
	<select id="projectSubChkGrade" resultType="string" parameterType="string">
		  select distinct
		  a.project_member_grade  
		  from 
		  project_member a, project b 
		  where 
		  a.project_id = b.project_id 
		  and a.id = #{id} 
		  and a.project_member_grade = 1
	</select>
	<!-- 프로젝트 작업 이름 조회 -->
		<select id="projectSubTitles" resultType="arraylist"
		resultMap="resultProjectSub" parameterType="string">
		   select 
		   project_sub_title
		   from
		   project_sub
		   where
		   project_sub_id = #{subid}
	</select>
	
	<!-- 프로젝트 히스토리 로그인한 애 사진 조회 -->
		<select id="projectMemberImg" resultType="string"
			resultMap="resultMember" parameterType="Member">
		   select 
		   profile,
		   name,
		   id
		   from
		   member
		   where
		   id = #{id}
		</select>

	<!-- 프로젝트 날짜 조회 -->
	<select id="projectDate" resultType="arraylist"
		resultMap="resultProject" parameterType="string">
		   select
		   project_id,
		   project_title, 
		   project_std_date,
		   project_end_date
		   from project
		   where project_id = #{project_id}  
	</select>
	<!--히스토리 인원체크 -->
		<select id="projectMemberChk" resultType="arraylist"
		resultMap="resultProjectMember" parameterType="ProjectMember">
		   select
		   id
		   from project_member
		   where project_sub_id = #{project_sub_id}   
	</select>
		<!--히스토리 인원체크 -->
		<select id="projectChk" resultType="arraylist"
		resultMap="resultProjectMember" parameterType="ProjectMember">
		   select
		   id
		   from project_member
		   where project_id = #{project_id}   
	</select>


	<!-- select id="projectSubMemberList" resultType="arraylist"
		resultMap="resultProjectMember" parameterType="string">
		select member.name from PROJECT_MEMBER, member, project_sub 
		where project_member.id = member.id and project_member.project_sub_id = project_sub.project_sub_id and project_sub.project_id = #{project_id} 
	</select> -->
		<!-- 프로잭트 삽입 -->
	<insert id="projectInsert" flushCache="true" statementType="PREPARED" parameterType="Project">
		insert into project(PROJECT_ID,PROJECT_TITLE,PROJECT_STD_DATE,PROJECT_END_DATE,PROJECT_STATUS,PROJECT_COLOR)
		values (WEFER_PRJ_SEQ.NEXTVAL,#{project_title},#{project_std_date},#{project_end_date},#{project_status},#{project_color})
		
	</insert>
	<!-- 서브 프로젝트 삽입 -->
	<insert id="projectSubInsert" flushCache="true" statementType="PREPARED" parameterType="ProjectSub">
		insert into project_sub(PROJECT_SUB_ID, PROJECT_SUB_TITLE, PROJECT_SUB_STD_DATE, PROJECT_SUB_END_DATE, PROJECT_SUB_IMPORTANT, PROJECT_SUB_STATUS, PROJECT_ID) 
		values (WEFER_PRJ_SUB_SEQ.NEXTVAL, #{project_sub_title}, #{project_sub_std_date}, #{project_sub_end_date}, #{project_sub_important}, #{project_sub_status}, WEFER_PRJ_SEQ.CURRVAL)
	</insert>
	
		<!-- 프로젝트 멤버 삽입 -->
	<insert id="projectSubMember" flushCache="true" statementType="PREPARED" parameterType="ProjectMember">
		insert into project_member(PROJECT_MEMBER_ID, PROJECT_ID, PROJECT_SUB_ID, ID, PROJECT_MEMBER_GRADE) 
		values (WEFER_PRJ_MEMBER_SEQ.NEXTVAL, WEFER_PRJ_SEQ.CURRVAL, WEFER_PRJ_SUB_SEQ.CURRVAL, #{id}, #{project_member_grade})
	</insert>
	<!-- 서브 프로젝트 추가-->
	<insert id="projectSubAdd" flushCache="true" statementType="PREPARED" parameterType="ProjectSub">
		insert into project_sub(PROJECT_SUB_ID, PROJECT_SUB_TITLE, PROJECT_SUB_STD_DATE, PROJECT_SUB_END_DATE, PROJECT_SUB_IMPORTANT, PROJECT_SUB_STATUS, PROJECT_ID) 
		values (WEFER_PRJ_SUB_SEQ.NEXTVAL, #{project_sub_title}, #{project_sub_std_date}, #{project_sub_end_date}, #{project_sub_important}, #{project_sub_status}, #{project_id})
	</insert>
			<!-- 프로젝트 멤버 추가 -->
	<insert id="projectSubAddMember" flushCache="true" statementType="PREPARED" parameterType="ProjectMember">
		insert into project_member(PROJECT_MEMBER_ID, PROJECT_ID, PROJECT_SUB_ID, ID, PROJECT_MEMBER_GRADE) 
		values (WEFER_PRJ_MEMBER_SEQ.NEXTVAL, #{project_id}, WEFER_PRJ_SUB_SEQ.CURRVAL, #{id}, #{project_member_grade})
	</insert>
	<!-- 작업수정 -->
	<update id="projectSubUpdate" flushCache="true" statementType="PREPARED" timeout="20" parameterType="ProjectSub">
		update project_sub 
		set 
		project_sub_title = #{project_sub_title},
		project_sub_std_date = #{project_sub_std_date},
		project_sub_end_date = #{project_sub_end_date},
		project_sub_status = #{project_sub_status}
		where
		project_sub_id = #{project_sub_id}
	</update>

		<!-- 프로젝트 멤버 추가 -->
	<insert id="projectSubUpdateInsertMember" flushCache="true" statementType="PREPARED" parameterType="ProjectMember">
		insert into project_member(PROJECT_MEMBER_ID, PROJECT_ID, PROJECT_SUB_ID, ID, PROJECT_MEMBER_GRADE) 
		values (WEFER_PRJ_MEMBER_SEQ.NEXTVAL, #{project_id}, #{project_sub_id}, #{id}, #{project_member_grade})
	</insert>


	
	<insert id="historyInsert" flushCache="true" statementType="PREPARED" parameterType="ProjectDetail">
		insert into 
		project_datail
		(PROJECT_DATAIL_ID, 
		PROJECT_DATAIL_CONTENT, 
		PROJECT_DATAIL_WRITE_DATE, 
		PROJECT_DATAIL_FILE, 
		ID,
		PROJECT_ID,
		PROJECT_SUB_ID,
		PROJECT_DATAIL_STATUS) 
		values 
		(WEFER_PRJ_DATAIL_SEQ.NEXTVAL,
		 #{project_datail_content}, 
		 current_date, 
		 #{project_datail_file}, 
		 #{id},
		 #{project_id},
		 #{project_sub_id},
		 #{project_datail_status})
	</insert>
	
	<!-- 히스토리 리스트 가져오기 -->
	<select id="projectHistoryList" resultType="arraylist"
		resultMap="resultProjectDetail" parameterType="ProjectDetail">
		select project_datail.*, member.profile, member.name  
		from  project_datail, member where
		project_datail.id  = member.id 
		and project_datail.project_id = #{project_id} 
		and project_datail.project_sub_id = #{project_sub_id} order by project_datail.project_datail_write_date desc
	</select>
	
	<!-- 지울 파일이름 가져오기 -->
	<select id="historyFileName" resultType="string" parameterType="string">
		select project_datail_file from project_datail where project_datail_id = #{project_datail_id}
	</select>
	
	<!-- 히스토리 추가 -->
	<!-- 	
	private String project_datail_id;
	private String project_datail_content;
	private Date project_datail_write_date;
	private String project_datail_file;
	private String id;
	private String project_id;
	private String project_sub_id; -->
	<!-- 히스토리 수정 -->
	<update id="historyUpdateFile" flushCache="true" statementType="PREPARED" timeout="20" parameterType="ProjectDetail">
		update project_datail 
		set 
		<choose>
			<when test="project_datail_content != null and project_datail_content !=''">
				project_datail_content = #{project_datail_content}
			</when>
			<when test="project_datail_file != null and project_datail_file != ''">
				project_datail_file = #{project_datail_file}
			</when>
			<when test="project_datail_status != null and project_datail_status != ''">
				project_datail_status = #{project_datail_status}
			</when>
			<otherwise>
				project_datail_content = #{project_datail_content},
				project_datail_status = #{project_datail_status},
				project_datail_file = #{project_datail_file}
			</otherwise>
		</choose>
		
		where
		project_datail_id = #{project_datail_id}
	</update>
	
	<!-- 히스토리 삭제 -->
	<delete id="projectHistoryDelete" flushCache="true" statementType="PREPARED" timeout="20" parameterType="ProjectDetail">
		delete from project_datail where project_datail_id = #{project_datail_id}
	</delete>

	
	<!-- 댓글 인서트 -->
	<insert id = "projectCommentWirte" flushCache="true" statementType="PREPARED" parameterType="ProjectComment">
		insert into project_comment(project_comment_id, project_comment_content, project_comment_writedate, project_datail_id, id)
		values(WEFER_PRJ_COMMENT_SEQ.NEXTVAL, #{project_comment_content}, current_date, #{project_datail_id}, #{id})
		
	</insert>
	
	
		<!-- 댓글 가져오기 -->
	<select id="projectCommentList" resultType="arraylist" parameterType="ProjectComment" resultMap="resultProjectComment">
		select a.*, b.name, b.profile from project_comment a, member b where a.id = b.id and a.project_datail_id=#{project_datail_id}
	</select>
	<!-- 인서트한 댓글 가져오기 -->
	<select id="projectCommentInsertList" resultType="arraylist" parameterType="ProjectComment" resultMap="resultProjectComment">
		select a.*, b.name, b.profile from project_comment a, member b 
		where a.id = b.id and a.project_datail_id=#{project_datail_id} and a.project_comment_id =(select max(project_comment_id) from project_comment)
	</select>
	<!-- 대댓글 인서트 -->
	<insert id = "projecthistoryReCommentInsert" flushCache="true" statementType="PREPARED" parameterType="ProjectReComment">
		insert into project_recomment(project_recomment_id, project_recomment_content, project_recomment_date, project_comment_id, id)
		values(WEFER_PRJ_RECOMMENT_SEQ.NEXTVAL, #{project_recomment_content}, current_date, #{project_comment_id}, #{id})
	</insert>
	<!-- 인서트한 댓글 가져오기 -->
	<select id="projectreReCommentInsertList" resultType="arraylist" parameterType="ProjectReComment" resultMap="resultProjectReComment">
		select a.*, b.name, b.profile from project_recomment a, member b 
		where a.id = b.id and a.project_comment_id=#{project_comment_id} and a.project_recomment_id =(select max(project_recomment_id) from project_recomment)
	</select>
		<!-- 대댓글 가져오기 -->
	<select id="projectReCommentList" resultType="arraylist" parameterType="ProjectReComment" resultMap="resultProjectReComment">
		select a.*, m.name, m.profile from project_recomment a, member m where a.id = m.id and project_comment_id = #{project_comment_id} order by a.project_recomment_date asc
	</select>
	
	<!-- 댓글 삭제 -->
	<delete id="projectCommentDelete" flushCache="true" statementType="PREPARED" timeout="20" parameterType="ProjectComment">
		delete from project_comment where project_comment_id = #{project_comment_id}
	</delete>
	<!-- 댓글 삭제 -->
	<delete id="projectReCommentDelete" flushCache="true" statementType="PREPARED" timeout="20" parameterType="ProjectReComment">
		delete from project_recomment where project_recomment_id = #{project_recomment_id}
	</delete>
	
	
</mapper>
